// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  CLIENT
  PROVIDER
  BOTH
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password      String
  firstName     String
  lastName      String
  phone         String   @unique
  profileImage  String?
  location      String?
  description   String?
  userType      UserType @default(BOTH)
  isVerified    Boolean  @default(false)
  rating        Float?   @default(0)
  totalReviews  Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  services      Service[]
  reviews       Review[]
  contactLogs   ContactLog[]

  @@map("users")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  icon        String
  color       String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())

  // Relations
  services    Service[]

  @@map("categories")
}

model Service {
  id             String   @id @default(cuid())
  providerId     String
  categoryId     String
  title          String
  description    String
  location       String
  minPrice       Decimal?
  maxPrice       Decimal?
  images         Json?
  availableHours Json?
  serviceAreas   Json?    // Array of areas where they provide service
  isActive       Boolean  @default(true)
  views          Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  provider       User       @relation(fields: [providerId], references: [id], onDelete: Cascade)
  category       Category   @relation(fields: [categoryId], references: [id])
  reviews        Review[]
  portfolios     Portfolio[]
  contactLogs    ContactLog[]

  @@map("services")
}

model Review {
  id          String   @id @default(cuid())
  reviewerId  String
  serviceId   String
  rating      Int      // 1-5 stars
  comment     String?
  images      Json?
  createdAt   DateTime @default(now())

  // Relations
  reviewer    User     @relation(fields: [reviewerId], references: [id], onDelete: Cascade)
  service     Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([reviewerId, serviceId]) // One review per user per service
  @@map("reviews")
}

model Portfolio {
  id           String    @id @default(cuid())
  serviceId    String
  title        String
  description  String
  images       Json?
  projectUrl   String?
  completedAt  DateTime?
  createdAt    DateTime  @default(now())

  // Relations
  service      Service   @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("portfolios")
}

model ContactLog {
  id            String   @id @default(cuid())
  clientId      String
  serviceId     String
  contactMethod String   // "phone", "whatsapp", "email"
  createdAt     DateTime @default(now())

  // Relations
  client        User     @relation(fields: [clientId], references: [id], onDelete: Cascade)
  service       Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("contact_logs")
}